import { Adapter, BroadcastOptions, Room } from "socket.io-adapter";
export interface MongoAdapterOptions {
    /**
     * the name of this node
     * @default a random id
     */
    uid: string;
    /**
     * after this timeout the adapter will stop waiting from responses to request
     * @default 5000
     */
    requestsTimeout: number;
    /**
     * Number of ms between two heartbeats
     * @default 5000
     */
    heartbeatInterval: number;
    /**
     * Number of ms without heartbeat before we consider a node down
     * @default 10000
     */
    heartbeatTimeout: number;
}
/**
 * Returns a function that will create a MongoAdapter instance.
 *
 * @param mongoCollection - a MongoDB collection instance
 * @param opts - additional options
 *
 * @public
 */
export declare function createAdapter(mongoCollection: any, opts?: Partial<MongoAdapterOptions>): (nsp: any) => MongoAdapter;
export declare class MongoAdapter extends Adapter {
    readonly uid: string;
    requestsTimeout: number;
    heartbeatInterval: number;
    heartbeatTimeout: number;
    private readonly mongoCollection;
    private changeStream;
    private nodesMap;
    private heartbeatTimer;
    private requests;
    /**
     * Adapter constructor.
     *
     * @param nsp - the namespace
     * @param mongoCollection - a MongoDB collection instance
     * @param opts - additional options
     *
     * @public
     */
    constructor(nsp: any, mongoCollection: any, opts?: Partial<MongoAdapterOptions>);
    close(): Promise<void> | void;
    private initChangeStream;
    onEvent(event: any): Promise<void>;
    private scheduleHeartbeat;
    private publish;
    /**
     * Transform ES6 Set into plain arrays
     */
    private static serializeOptions;
    private static deserializeOptions;
    broadcast(packet: any, opts: BroadcastOptions): void;
    addSockets(opts: BroadcastOptions, rooms: Room[]): void;
    delSockets(opts: BroadcastOptions, rooms: Room[]): void;
    disconnectSockets(opts: BroadcastOptions, close: boolean): void;
    private getExpectedResponseCount;
    fetchSockets(opts: BroadcastOptions): Promise<any[]>;
    serverSideEmit(packet: any[]): void;
    private serverSideEmitWithAck;
}
