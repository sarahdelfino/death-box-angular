import * as tslib_1 from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { WrappedSocket } from './socket-io.service';
/** Socket factory */
import * as ɵngcc0 from '@angular/core';
export function SocketFactory(config) {
    return new WrappedSocket(config);
}
export var SOCKET_CONFIG_TOKEN = new InjectionToken('__SOCKET_IO_CONFIG__');
var SocketIoModule = /** @class */ (function () {
    function SocketIoModule() {
    }
    SocketIoModule_1 = SocketIoModule;
    SocketIoModule.forRoot = function (config) {
        return {
            ngModule: SocketIoModule_1,
            providers: [
                { provide: SOCKET_CONFIG_TOKEN, useValue: config },
                {
                    provide: WrappedSocket,
                    useFactory: SocketFactory,
                    deps: [SOCKET_CONFIG_TOKEN]
                }
            ]
        };
    };
    var SocketIoModule_1;
SocketIoModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocketIoModule });
SocketIoModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocketIoModule_Factory(t) { return new (t || SocketIoModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocketIoModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return []; }, null); })();
    return SocketIoModule;
}());
export { SocketIoModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LWlvLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmd4LXNvY2tldC1pby9zcmMvc29ja2V0LWlvLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxxQkFBcUI7O0FBQ3JCLE1BQU0sVUFBVSxhQUFhLENBQUMsTUFBc0I7QUFDcEQsSUFBSSxPQUFPLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBaUIsc0JBQXNCLENBQUMsQ0FBQztBQUc5RjtBQUNvQixJQURwQjtBQUE0QixJQWMzQixDQUFDO0FBQ0YsdUJBZmEsY0FBYztBQUFFLElBQ2xCLHNCQUFPLEdBQWQsVUFBZSxNQUFzQjtBQUFJLFFBQ3JDLE9BQU87QUFDZixZQUFZLFFBQVEsRUFBRSxnQkFBYztBQUNwQyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtBQUNsRSxnQkFBZ0I7QUFDaEIsb0JBQW9CLE9BQU8sRUFBRSxhQUFhO0FBQzFDLG9CQUFvQixVQUFVLEVBQUUsYUFBYTtBQUM3QyxvQkFBb0IsSUFBSSxFQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDaEQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFDSjtJQWRZLGNBQWMsbURBRDFCO0lBQVEsQ0FBQyxFQUFFLENBQUMsUUFDQSxjQUFjLENBY3pCOzs7O2dEQUNGO0FBQUMsSUFEQSxxQkFBQztBQUNELENBREMsQUFkRixJQWNFOztBQTFCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBY0EsQUFBQSxBQWRBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFiQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFjQSxBQUFBLEFBQUEsQUFBQSxBQWRBLEFBY0EsQUFkQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNvY2tldElvQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvc29ja2V0LWlvLmNvbmZpZyc7XHJcbmltcG9ydCB7IFdyYXBwZWRTb2NrZXQgfSBmcm9tICcuL3NvY2tldC1pby5zZXJ2aWNlJztcclxuXHJcbi8qKiBTb2NrZXQgZmFjdG9yeSAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU29ja2V0RmFjdG9yeShjb25maWc6IFNvY2tldElvQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFdyYXBwZWRTb2NrZXQoY29uZmlnKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNPQ0tFVF9DT05GSUdfVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48U29ja2V0SW9Db25maWc+KCdfX1NPQ0tFVF9JT19DT05GSUdfXycpO1xyXG5cclxuQE5nTW9kdWxlKHt9KVxyXG5leHBvcnQgY2xhc3MgU29ja2V0SW9Nb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBTb2NrZXRJb0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U29ja2V0SW9Nb2R1bGU+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogU29ja2V0SW9Nb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBTT0NLRVRfQ09ORklHX1RPS0VOLCB1c2VWYWx1ZTogY29uZmlnIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogV3JhcHBlZFNvY2tldCxcclxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBTb2NrZXRGYWN0b3J5LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlcHMgOiBbU09DS0VUX0NPTkZJR19UT0tFTl1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiB9XHJcbiJdfQ==